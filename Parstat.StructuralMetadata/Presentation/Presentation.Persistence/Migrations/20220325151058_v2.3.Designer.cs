// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Presentation.Persistence;

namespace Presentation.Persistence.Migrations
{
    [DbContext(typeof(StructuralMetadataDbContext))]
    [Migration("20220325151058_v2.3")]
    partial class v23
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("iais_structural")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Concept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("Concepts");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Correspondence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TargetId");

                    b.HasIndex("SourceId", "TargetId")
                        .IsUnique();

                    b.ToTable("Correspondences");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Label", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Level", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("integer");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("NodeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NodeSetId");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Mapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CorrespondenceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("TargetId");

                    b.HasIndex("SourceId", "TargetId", "CorrespondenceId")
                        .IsUnique();

                    b.ToTable("Mappings");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.MeasurementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("MeasurementTypes");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.MeasurementUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("ConvertionRule")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsStandard")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("MeasurementTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementTypeId");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Node", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AggregationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<long>("LabelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("NodeSetId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LabelId");

                    b.HasIndex("LevelId");

                    b.HasIndex("NodeSetId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Code", "NodeSetId")
                        .IsUnique();

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.NodeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NodeSetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("NodeSets");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.RepresentedVariable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("SentinelValueDomainId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubstantiveValueDomainId")
                        .HasColumnType("bigint");

                    b.Property<long>("VariableId")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SentinelValueDomainId");

                    b.HasIndex("SubstantiveValueDomainId");

                    b.HasIndex("VariableId");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("RepresentedVariables");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.UnitType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.ValueDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Expression")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("MeasurementUnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NodeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("NodeSetId");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("ValueDomains");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Variable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("MeasuresId")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MeasuresId");

                    b.HasIndex("LocalId", "Version")
                        .IsUnique();

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Category", b =>
                {
                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Definition", b1 =>
                        {
                            b1.Property<long>("CategoryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("CategoryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Link", b1 =>
                        {
                            b1.Property<long>("CategoryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("CategoryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("CategoryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("Definition");

                    b.Navigation("Description");

                    b.Navigation("Link");

                    b.Navigation("Name");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Concept", b =>
                {
                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Definition", b1 =>
                        {
                            b1.Property<long>("ConceptId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("ConceptId");

                            b1.ToTable("Concepts");

                            b1.WithOwner()
                                .HasForeignKey("ConceptId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("ConceptId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("ConceptId");

                            b1.ToTable("Concepts");

                            b1.WithOwner()
                                .HasForeignKey("ConceptId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Link", b1 =>
                        {
                            b1.Property<long>("ConceptId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("ConceptId");

                            b1.ToTable("Concepts");

                            b1.WithOwner()
                                .HasForeignKey("ConceptId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("ConceptId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("ConceptId");

                            b1.ToTable("Concepts");

                            b1.WithOwner()
                                .HasForeignKey("ConceptId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("ConceptId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("ConceptId");

                            b1.ToTable("Concepts");

                            b1.WithOwner()
                                .HasForeignKey("ConceptId");
                        });

                    b.Navigation("Definition");

                    b.Navigation("Description");

                    b.Navigation("Link");

                    b.Navigation("Name");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Correspondence", b =>
                {
                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.NodeSet", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.NodeSet", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Label", b =>
                {
                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Value", b1 =>
                        {
                            b1.Property<long>("LabelId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("LabelId");

                            b1.HasIndex("En")
                                .IsUnique();

                            b1.HasIndex("Ro")
                                .IsUnique();

                            b1.HasIndex("Ru")
                                .IsUnique();

                            b1.ToTable("Labels");

                            b1.WithOwner()
                                .HasForeignKey("LabelId");
                        });

                    b.Navigation("Value");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Level", b =>
                {
                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.NodeSet", "NodeSet")
                        .WithMany("Levels")
                        .HasForeignKey("NodeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("LevelId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("LevelId");

                            b1.ToTable("Levels");

                            b1.WithOwner()
                                .HasForeignKey("LevelId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("LevelId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("LevelId");

                            b1.ToTable("Levels");

                            b1.WithOwner()
                                .HasForeignKey("LevelId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("LevelId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("LevelId");

                            b1.ToTable("Levels");

                            b1.WithOwner()
                                .HasForeignKey("LevelId");
                        });

                    b.Navigation("Description");

                    b.Navigation("Name");

                    b.Navigation("NodeSet");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Mapping", b =>
                {
                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Correspondence", "Correspondence")
                        .WithMany("Mappings")
                        .HasForeignKey("CorrespondenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Node", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Node", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Correspondence");

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.MeasurementType", b =>
                {
                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("MeasurementTypeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("MeasurementTypeId");

                            b1.ToTable("MeasurementTypes");

                            b1.WithOwner()
                                .HasForeignKey("MeasurementTypeId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("MeasurementTypeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("MeasurementTypeId");

                            b1.ToTable("MeasurementTypes");

                            b1.WithOwner()
                                .HasForeignKey("MeasurementTypeId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("MeasurementTypeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("MeasurementTypeId");

                            b1.ToTable("MeasurementTypes");

                            b1.WithOwner()
                                .HasForeignKey("MeasurementTypeId");
                        });

                    b.Navigation("Description");

                    b.Navigation("Name");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.MeasurementUnit", b =>
                {
                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.MeasurementType", "MeasurementType")
                        .WithMany("MeasureUnits")
                        .HasForeignKey("MeasurementTypeId");

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("MeasurementUnitId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("MeasurementUnitId");

                            b1.ToTable("MeasurementUnits");

                            b1.WithOwner()
                                .HasForeignKey("MeasurementUnitId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("MeasurementUnitId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("MeasurementUnitId");

                            b1.ToTable("MeasurementUnits");

                            b1.WithOwner()
                                .HasForeignKey("MeasurementUnitId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("MeasurementUnitId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("MeasurementUnitId");

                            b1.ToTable("MeasurementUnits");

                            b1.WithOwner()
                                .HasForeignKey("MeasurementUnitId");
                        });

                    b.Navigation("Description");

                    b.Navigation("MeasurementType");

                    b.Navigation("Name");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Node", b =>
                {
                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Category", "Category")
                        .WithMany("Nodes")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Label", "Label")
                        .WithMany("Nodes")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Level", "Level")
                        .WithMany("Nodes")
                        .HasForeignKey("LevelId");

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.NodeSet", "NodeSet")
                        .WithMany("Nodes")
                        .HasForeignKey("NodeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Node", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("NodeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Description");

                    b.Navigation("Label");

                    b.Navigation("Level");

                    b.Navigation("NodeSet");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.NodeSet", b =>
                {
                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Definition", b1 =>
                        {
                            b1.Property<long>("NodeSetId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("NodeSetId");

                            b1.ToTable("NodeSets");

                            b1.WithOwner()
                                .HasForeignKey("NodeSetId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("NodeSetId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("NodeSetId");

                            b1.ToTable("NodeSets");

                            b1.WithOwner()
                                .HasForeignKey("NodeSetId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Link", b1 =>
                        {
                            b1.Property<long>("NodeSetId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("NodeSetId");

                            b1.ToTable("NodeSets");

                            b1.WithOwner()
                                .HasForeignKey("NodeSetId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("NodeSetId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("NodeSetId");

                            b1.ToTable("NodeSets");

                            b1.WithOwner()
                                .HasForeignKey("NodeSetId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("NodeSetId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("NodeSetId");

                            b1.ToTable("NodeSets");

                            b1.WithOwner()
                                .HasForeignKey("NodeSetId");
                        });

                    b.Navigation("Definition");

                    b.Navigation("Description");

                    b.Navigation("Link");

                    b.Navigation("Name");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.RepresentedVariable", b =>
                {
                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.ValueDomain", "SentinelValueDomain")
                        .WithMany("SentinelRepresentations")
                        .HasForeignKey("SentinelValueDomainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.ValueDomain", "SubstantiveValueDomain")
                        .WithMany("SubstantiveRepresentations")
                        .HasForeignKey("SubstantiveValueDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Variable", "Variable")
                        .WithMany("Representations")
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Definition", b1 =>
                        {
                            b1.Property<long>("RepresentedVariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("RepresentedVariableId");

                            b1.ToTable("RepresentedVariables");

                            b1.WithOwner()
                                .HasForeignKey("RepresentedVariableId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("RepresentedVariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("RepresentedVariableId");

                            b1.ToTable("RepresentedVariables");

                            b1.WithOwner()
                                .HasForeignKey("RepresentedVariableId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Link", b1 =>
                        {
                            b1.Property<long>("RepresentedVariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("RepresentedVariableId");

                            b1.ToTable("RepresentedVariables");

                            b1.WithOwner()
                                .HasForeignKey("RepresentedVariableId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("RepresentedVariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("RepresentedVariableId");

                            b1.ToTable("RepresentedVariables");

                            b1.WithOwner()
                                .HasForeignKey("RepresentedVariableId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("RepresentedVariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("RepresentedVariableId");

                            b1.ToTable("RepresentedVariables");

                            b1.WithOwner()
                                .HasForeignKey("RepresentedVariableId");
                        });

                    b.Navigation("Definition");

                    b.Navigation("Description");

                    b.Navigation("Link");

                    b.Navigation("Name");

                    b.Navigation("SentinelValueDomain");

                    b.Navigation("SubstantiveValueDomain");

                    b.Navigation("Variable");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.UnitType", b =>
                {
                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Definition", b1 =>
                        {
                            b1.Property<long>("UnitTypeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("UnitTypeId");

                            b1.ToTable("UnitTypes");

                            b1.WithOwner()
                                .HasForeignKey("UnitTypeId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("UnitTypeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("UnitTypeId");

                            b1.ToTable("UnitTypes");

                            b1.WithOwner()
                                .HasForeignKey("UnitTypeId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Link", b1 =>
                        {
                            b1.Property<long>("UnitTypeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("UnitTypeId");

                            b1.ToTable("UnitTypes");

                            b1.WithOwner()
                                .HasForeignKey("UnitTypeId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("UnitTypeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("UnitTypeId");

                            b1.ToTable("UnitTypes");

                            b1.WithOwner()
                                .HasForeignKey("UnitTypeId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("UnitTypeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("UnitTypeId");

                            b1.ToTable("UnitTypes");

                            b1.WithOwner()
                                .HasForeignKey("UnitTypeId");
                        });

                    b.Navigation("Definition");

                    b.Navigation("Description");

                    b.Navigation("Link");

                    b.Navigation("Name");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.ValueDomain", b =>
                {
                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.MeasurementUnit", "MeasurementUnit")
                        .WithMany("ValueDomains")
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.NodeSet", "NodeSet")
                        .WithMany()
                        .HasForeignKey("NodeSetId");

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("ValueDomainId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("ValueDomainId");

                            b1.ToTable("ValueDomains");

                            b1.WithOwner()
                                .HasForeignKey("ValueDomainId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("ValueDomainId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("ValueDomainId");

                            b1.ToTable("ValueDomains");

                            b1.WithOwner()
                                .HasForeignKey("ValueDomainId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("ValueDomainId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("ValueDomainId");

                            b1.ToTable("ValueDomains");

                            b1.WithOwner()
                                .HasForeignKey("ValueDomainId");
                        });

                    b.Navigation("Description");

                    b.Navigation("Level");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Name");

                    b.Navigation("NodeSet");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Variable", b =>
                {
                    b.HasOne("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.UnitType", "Measures")
                        .WithMany("Variables")
                        .HasForeignKey("MeasuresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Definition", b1 =>
                        {
                            b1.Property<long>("VariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("VariableId");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Description", b1 =>
                        {
                            b1.Property<long>("VariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("VariableId");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Link", b1 =>
                        {
                            b1.Property<long>("VariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("VariableId");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "Name", b1 =>
                        {
                            b1.Property<long>("VariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("VariableId");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableId");
                        });

                    b.OwnsOne("Presentation.Domain.MultilanguageString", "VersionRationale", b1 =>
                        {
                            b1.Property<long>("VariableId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("En")
                                .HasColumnType("text");

                            b1.Property<string>("Ro")
                                .HasColumnType("text");

                            b1.Property<string>("Ru")
                                .HasColumnType("text");

                            b1.HasKey("VariableId");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableId");
                        });

                    b.Navigation("Definition");

                    b.Navigation("Description");

                    b.Navigation("Link");

                    b.Navigation("Measures");

                    b.Navigation("Name");

                    b.Navigation("VersionRationale");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Category", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Correspondence", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Label", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Level", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.MeasurementType", b =>
                {
                    b.Navigation("MeasureUnits");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.MeasurementUnit", b =>
                {
                    b.Navigation("ValueDomains");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Node", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.NodeSet", b =>
                {
                    b.Navigation("Levels");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.UnitType", b =>
                {
                    b.Navigation("Variables");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.ValueDomain", b =>
                {
                    b.Navigation("SentinelRepresentations");

                    b.Navigation("SubstantiveRepresentations");
                });

            modelBuilder.Entity("Presentation.Domain.StructuralMetadata.Entities.Gsim.Concept.Variable", b =>
                {
                    b.Navigation("Representations");
                });
#pragma warning restore 612, 618
        }
    }
}
